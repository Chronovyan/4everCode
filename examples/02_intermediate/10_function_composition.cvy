// Chronovyan Learning Example: Function Composition
// Difficulty: Intermediate
// Concepts: Function composition, return values, higher-order functions
//
// This example demonstrates how to compose functions in Chronovyan,
// building complex operations from simpler, reusable components.

// Basic functions that process data and return results
function double(x) {
    return x * 2
}

function add_five(x) {
    return x + 5
}

function square(x) {
    return x * x
}

// Using individual functions separately
number = 3
print_to_cora("Starting with: " + number)

doubled = double(number)
print_to_cora("After double: " + doubled)  // 6

added = add_five(doubled)
print_to_cora("After add_five: " + added)  // 11

result = square(added)
print_to_cora("After square: " + result)  // 121

// Function composition - combining functions by passing output as input
print_to_cora("\nFunction composition example:")
print_to_cora("Starting with: " + number)

// Nested function calls - inside out execution
composed_result = square(add_five(double(number)))
print_to_cora("Result of square(add_five(double(3))): " + composed_result)  // 121

// Creating a function that composes other functions
function compose_operations(input_value) {
    step1 = double(input_value)
    step2 = add_five(step1)
    step3 = square(step2)
    return step3
}

print_to_cora("\nUsing a composed function:")
print_to_cora("compose_operations(3): " + compose_operations(3))  // 121
print_to_cora("compose_operations(5): " + compose_operations(5))  // 225

// Functions with multiple parameters
function calculate_distance(x1, y1, x2, y2) {
    x_diff = x2 - x1
    y_diff = y2 - y1
    return Math.sqrt((x_diff * x_diff) + (y_diff * y_diff))
}

function calculate_midpoint(x1, y1, x2, y2) {
    mid_x = (x1 + x2) / 2
    mid_y = (y1 + y2) / 2
    return {
        "x": mid_x,
        "y": mid_y
    }
}

// Composing multi-parameter functions
point_a = {"x": 0, "y": 0}
point_b = {"x": 3, "y": 4}

print_to_cora("\nMulti-parameter function composition:")
distance = calculate_distance(point_a.x, point_a.y, point_b.x, point_b.y)
print_to_cora("Distance between points: " + distance)  // 5

midpoint = calculate_midpoint(point_a.x, point_a.y, point_b.x, point_b.y)
print_to_cora("Midpoint: (" + midpoint.x + ", " + midpoint.y + ")")  // (1.5, 2)

// Higher-order functions (functions that return functions)
function create_multiplier(factor) {
    // Return a function that multiplies by the specified factor
    return function(x) {
        return x * factor
    }
}

// Create specialized functions using the higher-order function
double_func = create_multiplier(2)
triple_func = create_multiplier(3)
quadruple_func = create_multiplier(4)

print_to_cora("\nHigher-order functions:")
print_to_cora("double_func(10): " + double_func(10))    // 20
print_to_cora("triple_func(10): " + triple_func(10))    // 30
print_to_cora("quadruple_func(10): " + quadruple_func(10))  // 40

// Creating a general compose function that combines any two functions
function compose(func1, func2) {
    return function(x) {
        return func2(func1(x))
    }
}

// Use the compose function to create new function combinations
double_then_square = compose(double, square)
square_then_double = compose(square, double)

print_to_cora("\nUsing the compose function:")
print_to_cora("double_then_square(5): " + double_then_square(5))  // square(double(5)) = square(10) = 100
print_to_cora("square_then_double(5): " + square_then_double(5))  // double(square(5)) = double(25) = 50

// Real-world example: Signal processing pipeline
function filter_noise(signal) {
    return signal * 0.8  // Remove 20% (noise)
}

function amplify(signal) {
    return signal * 2.5  // Amplify by 250%
}

function normalize(signal) {
    // Ensure signal is between 0 and 100
    if (signal > 100) return 100
    if (signal < 0) return 0
    return signal
}

// Create a signal processing pipeline using function composition
signal_processor = function(raw_signal) {
    return normalize(amplify(filter_noise(raw_signal)))
}

print_to_cora("\nSignal processing example:")
raw_signals = [42, 120, 35, 80, 65]
print_to_cora("Raw signals: " + raw_signals)

processed_signals = []
for (i = 0; i < raw_signals.length; i++) {
    processed_signals.push(signal_processor(raw_signals[i]))
}

print_to_cora("Processed signals: " + processed_signals)

// Expected Output:
// Starting with: 3
// After double: 6
// After add_five: 11
// After square: 121
//
// Function composition example:
// Starting with: 3
// Result of square(add_five(double(3))): 121
//
// Using a composed function:
// compose_operations(3): 121
// compose_operations(5): 225
//
// Multi-parameter function composition:
// Distance between points: 5
// Midpoint: (1.5, 2)
//
// Higher-order functions:
// double_func(10): 20
// triple_func(10): 30
// quadruple_func(10): 40
//
// Using the compose function:
// double_then_square(5): 100
// square_then_double(5): 50
//
// Signal processing example:
// Raw signals: 42,120,35,80,65
// Processed signals: 84,100,70,100,100 