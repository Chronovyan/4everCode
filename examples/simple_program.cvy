// Simple Chronovyan program to test bytecode generation
// This program demonstrates basic functionality including:
// - Variable declarations and assignments
// - Arithmetic operations
// - Conditional statements
// - Loops
// - Function definitions and calls
// - Resource consumption
// - Temporal operations

// Main function definition
function main() {
    // Print welcome message
    print("Welcome to Chronovyan Bytecode Test");
    
    // Basic variable declarations and arithmetic
    var a = 10;
    var b = 20;
    var c = a + b;
    
    print("a + b = " + c);
    
    // Conditional statement
    if (c > 25) {
        print("c is greater than 25");
    } else {
        print("c is not greater than 25");
    }
    
    // Loop
    print("Counting from 1 to 5:");
    for (var i = 1; i <= 5; i = i + 1) {
        print(i);
    }
    
    // Function call
    var result = calculateFactorial(5);
    print("Factorial of 5 is: " + result);
    
    // Resource consumption
    consumeResources(10, 5);
    
    // Check resource availability
    if (checkResources(100, 50)) {
        print("Enough resources available for temporal operation");
        
        // Perform a temporal operation
        branch(1);
        print("Timeline branched");
        
        // Stabilize the timeline
        stabilize();
        print("Timeline stabilized");
    } else {
        print("Not enough resources for temporal operation");
    }
    
    return 0;
}

// Factorial function
function calculateFactorial(n) {
    if (n <= 1) {
        return 1;
    }
    
    return n * calculateFactorial(n - 1);
}

// Print function (built-in)
function print(message) {
    // This will be handled by the interpreter
    debug_print(message);
}

// Resource management functions (built-in)
function consumeResources(aethel, chronon) {
    // Consumes the specified amount of resources
    consume_resource(aethel, chronon);
}

function checkResources(aethel, chronon) {
    // Checks if enough resources are available
    return check_resource(aethel, chronon);
}

// Temporal operations (built-in)
function branch(timeline) {
    // Creates a new branch in the timeline
    branch_timeline(timeline);
}

function stabilize() {
    // Stabilizes the current timeline
    stabilize_timeline();
} 