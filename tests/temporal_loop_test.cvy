// TEMPORAL_LOOP Test Program
// This program demonstrates the usage of the TEMPORAL_LOOP construct

// Basic TEMPORAL_LOOP with a condition
VAR counter = 0;
PRINT("Test 1: Basic TEMPORAL_LOOP with condition");
TEMPORAL_LOOP (counter < 5) {
    PRINT("Iteration: " + counter);
    counter = counter + 1;
}

// TEMPORAL_LOOP with duration
VAR durationCounter = 0;
PRINT("\nTest 2: TEMPORAL_LOOP with duration");
TEMPORAL_LOOP DURATION(10) (TRUE) {
    PRINT("Duration-based iteration: " + durationCounter);
    durationCounter = durationCounter + 1;
    // This loop will exit after accumulated duration reaches 10
}

// TEMPORAL_LOOP with variance
VAR varianceCounter = 0;
PRINT("\nTest 3: TEMPORAL_LOOP with variance");
TEMPORAL_LOOP DURATION(5) (varianceCounter < 10) VARIANCE(0.5) {
    PRINT("Variance-based iteration: " + varianceCounter);
    varianceCounter = varianceCounter + 1;
    // Duration will vary by Â±50% each iteration
}

// TEMPORAL_LOOP with flow control
VAR flowCounter = 0;
PRINT("\nTest 4: TEMPORAL_LOOP with flow control");
TEMPORAL_LOOP (flowCounter < 10) {
    flowCounter = flowCounter + 1;
    PRINT("Flow iteration: " + flowCounter);
    
    // Break out of the loop early
    IF (flowCounter == 5) {
        PRINT("Breaking out of loop at iteration 5");
        BREAK_CHRONON;
    }
}

// TEMPORAL_LOOP with direction reversal
VAR reverseCounter = 0;
VAR direction = "forward";
PRINT("\nTest 5: TEMPORAL_LOOP with direction reversal");
TEMPORAL_LOOP (reverseCounter < 10 && reverseCounter >= 0) {
    PRINT("Direction: " + direction + ", Counter: " + reverseCounter);
    
    // Reverse direction in the middle
    IF (reverseCounter == 5 && direction == "forward") {
        PRINT("Reversing flow direction");
        direction = "backward";
        REVERSE_FLOW;
    } ELSE {
        IF (direction == "forward") {
            reverseCounter = reverseCounter + 1;
        } ELSE {
            reverseCounter = reverseCounter - 1;
        }
    }
} 