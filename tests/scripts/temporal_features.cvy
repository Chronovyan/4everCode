// Test of temporal features in Chronovyan

// Import temporal modules
import temporal;
import debt_tracker;

// Initialize a temporal runtime
var runtime = new TemporalRuntime();
print("Temporal runtime initialized");

// Create a TimeAnchor
var anchor = runtime.createAnchor("MainTimelineAnchor");
print("Created TimeAnchor: " + anchor.getName());

// Track temporal debt
var tracker = new TemporalDebtTracker();
print("Initial stability: " + tracker.getStability());

// Simulate some temporal operations
print("\nPerforming temporal operations:");

// Simulating a minor temporal operation (e.g., small loop)
tracker.recordOperation("MinorLoop", 1);
print("After minor operation - Stability: " + tracker.getStability());

// Simulating a moderate temporal operation (e.g., branch creation)
tracker.recordOperation("BranchCreate", 2);
print("After branch creation - Stability: " + tracker.getStability());

// Project paradox risk for a major operation
var riskLevel = tracker.projectParadoxRisk("MajorRewrite", 3, 2);
print("Projected risk for major rewrite: " + riskLevel);

// Creating a timestream and echo
var stream = runtime.createTimestream("ExperimentalBranch");
print("Created timestream: " + stream.getId());

var echo = stream.createEcho("TestEcho");
print("Created echo: " + echo.getId());

// Check status of system
print("\nFinal system status:");
print("Current stability: " + tracker.getStability());
print("Active timestreams: " + runtime.getActiveTimestreamCount());
print("Total anchors: " + runtime.getAnchorCount());

// Attempt harmonization
var harmonizationSuccess = runtime.harmonize(stream, anchor);
print("Harmonization " + (harmonizationSuccess ? "succeeded" : "failed"));

// Final debt assessment
print("Final temporal debt: " + tracker.getTotalDebt()); 