// Chronovyan Example: CORA Power Core Stabilization Logic
// Difficulty: Beginner (integrates multiple beginner concepts)
// Concepts: Conditional logic, comparison operators, nested conditionals, function composition, object/data structures for configuration.
// Related Quest: Stabilizing CORA's Power Core (Main Quest Act I, Chapter 2)
// Note: This file represents the core logic Alex implements during the quest.

//------------------------------------------------------------------------------
// CORE POWER MANAGEMENT SYSTEM SETUP
//------------------------------------------------------------------------------

// Define CORA's power states and response thresholds
// These combine concepts learned from multiple side quests
function setup_power_management() {
    // Power state thresholds (from Power Fluctuations quest)
    critical_low_threshold = 20
    low_threshold = 50
    normal_min_threshold = 50
    normal_max_threshold = 150
    high_threshold = 180
    critical_high_threshold = 200
    
    // Radiation protection levels (from Radiation Shield quest)
    alpha_rad_threshold = 25
    beta_rad_threshold = 35
    gamma_rad_threshold = 12
    temporal_rad_threshold = 20
    
    // Environmental safety parameters (from Danger Zones quest)
    safe_temperature_min = 0
    safe_temperature_max = 45
    safe_air_quality = 60
    safe_temporal_stability = 60
    
    // Return configuration object with all thresholds and parameters
    return {
        "power": {
            "critical_low": critical_low_threshold,
            "low": low_threshold,
            "normal_min": normal_min_threshold,
            "normal_max": normal_max_threshold,
            "high": high_threshold,
            "critical_high": critical_high_threshold
        },
        "radiation": {
            "alpha": alpha_rad_threshold,
            "beta": beta_rad_threshold,
            "gamma": gamma_rad_threshold,
            "temporal": temporal_rad_threshold
        },
        "environment": {
            "temp_min": safe_temperature_min,
            "temp_max": safe_temperature_max,
            "air_quality": safe_air_quality,
            "temporal_stability": safe_temporal_stability
        },
        "status": "INITIALIZED"
    }
}

//------------------------------------------------------------------------------
// POWER STATE ASSESSMENT
//------------------------------------------------------------------------------

// Function to assess CORA's current power state
// Takes current power level and thresholds, returns state classification
function assess_power_state(current_power, thresholds) {
    // Implementation of basic conditional logic to classify power states
    if (current_power < thresholds.power.critical_low) {
        return "CRITICAL_LOW"
    } else if (current_power < thresholds.power.low) {
        return "LOW"
    } else if (current_power <= thresholds.power.normal_max) {
        return "NORMAL"
    } else if (current_power <= thresholds.power.high) {
        return "HIGH"
    } else {
        return "CRITICAL_HIGH"
    }
}

//------------------------------------------------------------------------------
// ENVIRONMENTAL ANALYSIS
//------------------------------------------------------------------------------

// Function to check environmental safety for power core
// Analyzes multiple environmental factors and identifies hazards
function check_environment(env_data, thresholds) {
    dangers = []
    
    // Check temperature (nested conditional approach from Danger Zones)
    if (env_data.temperature < thresholds.environment.temp_min) {
        dangers.push("Low temperature")
    } else if (env_data.temperature > thresholds.environment.temp_max) {
        dangers.push("High temperature")
    }
    
    // Check radiation levels (using comparison operators from Radiation Shield)
    if (env_data.radiation.alpha > thresholds.radiation.alpha) {
        dangers.push("Alpha radiation")
    }
    if (env_data.radiation.beta > thresholds.radiation.beta) {
        dangers.push("Beta radiation")
    }
    if (env_data.radiation.gamma > thresholds.radiation.gamma) {
        dangers.push("Gamma radiation")
    }
    if (env_data.radiation.temporal > thresholds.radiation.temporal) {
        dangers.push("Temporal radiation")
    }
    
    // Check air quality and temporal stability
    if (env_data.air_quality < thresholds.environment.air_quality) {
        dangers.push("Poor air quality")
    }
    if (env_data.temporal_stability < thresholds.environment.temporal_stability) {
        dangers.push("Temporal instability")
    }
    
    return dangers
}

//------------------------------------------------------------------------------
// POWER REGULATION SYSTEM
//------------------------------------------------------------------------------

// Function to implement appropriate power regulation response
// Core decision-making function that determines action based on power state and environment
function regulate_power_core(power_level, env_dangers, config) {
    print_to_cora("Current power level: " + power_level + "%")
    
    // Get current power state
    power_state = assess_power_state(power_level, config)
    print_to_cora("Power state: " + power_state)
    
    // Check if environmental dangers are affecting the core
    if (env_dangers.length > 0) {
        print_to_cora("Environmental hazards detected:")
        for (i = 0; i < env_dangers.length; i++) {
            print_to_cora("- " + env_dangers[i])
        }
    } else {
        print_to_cora("No environmental hazards detected")
    }
    
    // Implement appropriate regulation strategy based on power state
    // Combined approach using techniques from all three side quests
    if (power_state == "CRITICAL_LOW") {
        print_to_cora("CRITICAL LOW POWER STATE")
        print_to_cora("Activating emergency power conservation")
        
        // Apply emergency conservation measures
        conservation_result = apply_critical_conservation()
        
        // If environmental dangers present, implement additional protection
        if (env_dangers.length > 0) {
            print_to_cora("WARNING: Environmental hazards compounding power issues")
            print_to_cora("Implementing emergency environmental shielding")
            activate_emergency_shields(env_dangers)
        }
        
        return "EMERGENCY_CONSERVATION"
    } 
    else if (power_state == "LOW") {
        print_to_cora("LOW POWER STATE")
        print_to_cora("Implementing power conservation protocol")
        
        // Apply standard conservation measures
        conservation_result = apply_standard_conservation()
        
        // Adapt to environmental conditions
        if (env_dangers.length > 0) {
            print_to_cora("Environmental hazards detected - adjusting power allocation")
            optimize_power_for_hazards(env_dangers)
        }
        
        return "CONSERVATION_MODE"
    }
    else if (power_state == "NORMAL") {
        print_to_cora("NORMAL POWER STATE")
        print_to_cora("Maintaining balanced power regulation")
        
        // Apply balanced operation
        balance_result = apply_balanced_operation()
        
        // Standard environmental adaptation
        if (env_dangers.length > 0) {
            print_to_cora("Adjusting for environmental conditions")
            standard_environmental_adaptation(env_dangers)
        }
        
        return "STANDARD_OPERATION"
    }
    else if (power_state == "HIGH") {
        print_to_cora("HIGH POWER STATE")
        print_to_cora("Implementing excess power distribution protocol")
        
        // Distribute excess power
        distribution_result = distribute_excess_power()
        
        // Use excess for enhanced environmental protection if needed
        if (env_dangers.length > 0) {
            print_to_cora("Routing excess power to environmental protection systems")
            enhanced_environmental_protection(env_dangers)
        }
        
        return "DISTRIBUTION_MODE"
    }
    else { // CRITICAL_HIGH
        print_to_cora("CRITICAL HIGH POWER STATE")
        print_to_cora("Initiating emergency power venting")
        
        // Apply emergency venting
        venting_result = apply_emergency_venting()
        
        // Environmental hazards could worsen situation
        if (env_dangers.length > 0) {
            print_to_cora("WARNING: Environmental hazards may accelerate power buildup")
            print_to_cora("Implementing maximum venting protocols")
            accelerated_power_venting(env_dangers)
        }
        
        return "EMERGENCY_VENTING"
    }
}

//------------------------------------------------------------------------------
// CHRONOVYAN INTEGRATION SYSTEM
//------------------------------------------------------------------------------

// Function to integrate Chronovyan stabilization technology
// Manages the integration of different stabilizer types with verification checks
function integrate_chronovyan_stabilizer(core_status, stabilizer_type) {
    print_to_cora("Attempting to integrate Chronovyan " + stabilizer_type + " stabilizer...")
    
    // Verify compatibility
    if (stabilizer_type == "temporal") {
        if (core_status.last_regulation == "EMERGENCY_VENTING" || 
            core_status.last_regulation == "EMERGENCY_CONSERVATION") {
            print_to_cora("ERROR: Core too unstable for temporal stabilizer integration")
            print_to_cora("Must achieve STANDARD_OPERATION state first")
            return false
        }
        
        print_to_cora("Temporal stabilizer integration successful")
        print_to_cora("Implementing Chronovyan temporal harmonics")
        core_status.stabilizers.temporal = true
        return true
    }
    else if (stabilizer_type == "flux") {
        if (core_status.radiation_shielding < 75) {
            print_to_cora("ERROR: Insufficient radiation shielding for flux stabilizer")
            print_to_cora("Enhance radiation shielding to at least 75%")
            return false
        }
        
        print_to_cora("Flux stabilizer integration successful")
        print_to_cora("Implementing Chronovyan flux regulation patterns")
        core_status.stabilizers.flux = true
        return true
    }
    else if (stabilizer_type == "harmonic") {
        if (!core_status.stabilizers.temporal || !core_status.stabilizers.flux) {
            print_to_cora("ERROR: Harmonic stabilizer requires both temporal and flux stabilizers")
            print_to_cora("Install other stabilizers first")
            return false
        }
        
        print_to_cora("Harmonic stabilizer integration successful")
        print_to_cora("Implementing Chronovyan harmonic resonance patterns")
        core_status.stabilizers.harmonic = true
        return true
    }
    
    print_to_cora("ERROR: Unknown stabilizer type: " + stabilizer_type)
    return false
}

//------------------------------------------------------------------------------
// HELPER FUNCTION IMPLEMENTATIONS
//------------------------------------------------------------------------------

// Helper function for critical power conservation
function apply_critical_conservation() {
    print_to_cora_log("System Log: Critical power conservation measures applied.")
    // In-game, this would trigger actual changes in CORA's behavior/systems
    return true; // Indicates success
}

// Helper function to activate emergency shields against environmental hazards
function activate_emergency_shields(hazards) {
    print_to_cora_log("System Log: Emergency shielding activated against " + hazards.length + " hazards.")
    // Would activate specific shields based on hazard types
    return true;
}

// Helper function for standard power conservation
function apply_standard_conservation() {
    print_to_cora_log("System Log: Standard power conservation protocol active.")
    // Would implement moderate power-saving measures
    return true;
}

// Helper function to optimize power allocation for specific hazards
function optimize_power_for_hazards(hazards) {
    print_to_cora_log("System Log: Power allocation optimized for current environmental hazards.")
    // Would redistribute power to critical systems based on hazard types
    return true;
}

// Helper function for balanced power operation
function apply_balanced_operation() {
    print_to_cora_log("System Log: Balanced power operation maintained.")
    // Would ensure even power distribution across all systems
    return true;
}

// Helper function for standard environmental adaptation
function standard_environmental_adaptation(hazards) {
    print_to_cora_log("System Log: Standard environmental adaptations implemented.")
    // Would adjust systems to compensate for environmental conditions
    return true;
}

// Helper function to distribute excess power
function distribute_excess_power() {
    print_to_cora_log("System Log: Excess power distributed to secondary systems.")
    // Would route power to non-essential but beneficial systems
    return true;
}

// Helper function for enhanced environmental protection
function enhanced_environmental_protection(hazards) {
    print_to_cora_log("System Log: Enhanced environmental protection active using excess power.")
    // Would use surplus power for maximum environmental shielding
    return true;
}

// Helper function for emergency power venting
function apply_emergency_venting() {
    print_to_cora_log("System Log: Emergency power venting initiated.")
    // Would release excess power safely to prevent overload
    return true;
}

// Helper function for accelerated power venting
function accelerated_power_venting(hazards) {
    print_to_cora_log("System Log: Maximum venting protocols active due to environmental hazards.")
    // Would increase venting rate to counteract environmental factors
    return true;
}

//------------------------------------------------------------------------------
// EXAMPLE USAGE
//------------------------------------------------------------------------------

// This section demonstrates how to use the core functions with sample data
function example_usage() {
    print_to_cora("CORA POWER CORE STABILIZATION SYSTEM - EXAMPLE USAGE")
    print_to_cora("-----------------------------------------------------")
    
    // Initialize the power management system
    var config = setup_power_management()
    print_to_cora("Power management system initialized with thresholds:")
    print_to_cora("- Critical low power: " + config.power.critical_low)
    print_to_cora("- Normal power range: " + config.power.normal_min + " to " + config.power.normal_max)
    print_to_cora("- Critical high power: " + config.power.critical_high)
    
    // Sample CORA status
    var cora_status = {
        "power_level": 75,
        "last_regulation": "NONE",
        "radiation_shielding": 85,
        "stabilizers": {
            "temporal": false,
            "flux": false,
            "harmonic": false
        }
    }
    
    // Sample environment data
    var sample_environment = {
        "temperature": 32,
        "radiation": {
            "alpha": 18,
            "beta": 24,
            "gamma": 9,
            "temporal": 22  // Above threshold - will be detected as a hazard
        },
        "air_quality": 72,
        "temporal_stability": 68
    }
    
    print_to_cora("\nRunning environmental analysis...")
    var hazards = check_environment(sample_environment, config)
    
    print_to_cora("\nRegulating power core based on current conditions...")
    var regulation_mode = regulate_power_core(cora_status.power_level, hazards, config)
    
    print_to_cora("\nCurrent regulation mode: " + regulation_mode)
    cora_status.last_regulation = regulation_mode
    
    print_to_cora("\nAttempting to integrate temporal stabilizer...")
    integrate_chronovyan_stabilizer(cora_status, "temporal")
    
    print_to_cora("\nPower core stabilization system functioning correctly.")
}

// Uncomment the line below to run the example usage
// example_usage()

//------------------------------------------------------------------------------
// NOTES ON IMPLEMENTATION:
//------------------------------------------------------------------------------
// This file contains the core logic Alex develops during "Stabilizing CORA's Power Core"
// main quest. It demonstrates:
//
// 1. Comprehensive configuration using object structures
// 2. Multi-level conditional logic for power state assessment
// 3. Complex environmental hazard detection across multiple factors
// 4. Prioritized response strategies based on power states
// 5. Integration verification for Chronovyan technology components
//
// The system integrates concepts from multiple side quests:
// - Power Fluctuations: Basic conditional logic for power states
// - Radiation Shield: Comparison operators for environmental thresholds
// - Danger Zones: Nested conditionals for complex decision-making
//
// To use this system in-game, Alex would:
// 1. Set up the power management configuration
// 2. Continuously monitor environmental conditions
// 3. Regulate the power core based on current state
// 4. Integrate stabilizers when conditions are appropriate
//------------------------------------------------------------------------------ 