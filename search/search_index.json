{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\u23f3 Chronovyan <p>A temporal programming language for weaving narratives across time</p> <p>              Get Started                       View Examples          </p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"- **Temporal Programming**   - Work with time as a first-class construct   - Schedule and manage events with precision   - Control the flow of time in your applications  - **Powerful API**   - Intuitive and Pythonic interface   - Thread-safe design   - Extensible architecture  - **Comprehensive Documentation**   - Getting started guides   - API reference   - Practical examples"},{"location":"#quick-start","title":"\ud83d\udcd6 Quick Start","text":"<ol> <li> <p>Install Chronovyan <pre><code>pip install chronovyan\n</code></pre></p> </li> <li> <p>Create your first timeline <pre><code>from chronovyan import Timeline, Event\n\ndef log_event(data):\n    print(f\"[{timeline.current_time:.2f}s] {data}\")\n\n# Create and run a timeline\ntimeline = Timeline()\ntimeline.add_event(Event(1.0, log_event, \"Hello, Chronovyan!\"))\ntimeline.run()\n</code></pre></p> </li> <li> <p>Explore the documentation</p> </li> <li>Installation Guide</li> <li>First Steps</li> <li>Examples</li> </ol>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>Game Development: Manage game loops, animations, and timed events</li> <li>Simulations: Model complex temporal systems</li> <li>Data Processing: Schedule and coordinate data pipelines</li> <li>Interactive Applications: Create responsive UIs with timed interactions</li> </ul>"},{"location":"#why-chronovyan","title":"\ud83c\udf1f Why Chronovyan?","text":"<ul> <li>Intuitive API: Designed to be easy to use and understand</li> <li>Flexible: Suitable for a wide range of applications</li> <li>Well-documented: Comprehensive guides and API reference</li> <li>Active Development: Regular updates and improvements</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>Explore the documentation to learn more about Chronovyan:</p> <ul> <li>Getting Started - Set up Chronovyan and take your first steps</li> <li>Examples - Practical examples and use cases</li> <li>API Reference - Comprehensive API documentation</li> <li>Contributing - How to contribute to Chronovyan</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions from the community! Whether you're fixing bugs, adding new features, or improving documentation, your help is appreciated.</p> <p>Learn how to contribute \u2192</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>Chronovyan is licensed under the MIT License.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Chronovyan","text":"<p>Thank you for your interest in contributing to Chronovyan! We welcome all contributions, whether they're bug reports, feature requests, documentation improvements, or code contributions.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Create a branch for your changes</li> <li>Make your changes</li> <li>Test your changes</li> <li>Commit your changes with a clear commit message</li> <li>Push to your fork</li> <li>Open a Pull Request</li> </ol>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>pip</li> <li>Git</li> </ul>"},{"location":"CONTRIBUTING/#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourusername/Chronovyan.github.io.git\ncd Chronovyan.github.io\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the Documentation","text":"<pre><code># Serve the documentation locally\nmkdocs serve\n\n# Build the documentation\nmkdocs build\n</code></pre>"},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<p>Please follow the existing code style in the project. We use:</p> <ul> <li>Black for code formatting</li> <li>PEP 8 for Python code style</li> </ul>"},{"location":"CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, please include:</p> <ol> <li>A clear title and description</li> <li>Steps to reproduce the issue</li> <li>Expected vs. actual behavior</li> <li>Any relevant error messages</li> </ol>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>We welcome feature requests! Please open an issue and describe:</p> <ol> <li>The feature you'd like to see</li> <li>Why it's useful</li> <li>Any implementation ideas (optional)</li> </ol>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing to Chronovyan, you agree that your contributions will be licensed under the project's LICENSE file.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#timeline","title":"Timeline","text":"<pre><code>class Timeline:\n    \"\"\"A timeline manages and executes events in temporal order.\n\n    The Timeline class is the main interface for scheduling and running events.\n    It maintains a queue of events and processes them in chronological order.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize a new Timeline instance.\"\"\"\n        ...\n\n    def add_event(self, event: Event) -&gt; None:\n        \"\"\"Add an event to the timeline.\n\n        Args:\n            event: The Event instance to add to the timeline.\n\n        Raises:\n            ValueError: If the event is already added to a timeline.\n        \"\"\"\n        ...\n\n    def run(self, until: Optional[float] = None) -&gt; None:\n        \"\"\"Run the timeline, executing events in order.\n\n        Args:\n            until: Optional timestamp to run until. If None, runs until no events remain.\n        \"\"\"\n        ...\n\n    def stop(self) -&gt; None:\n        \"\"\"Stop the timeline execution.\"\"\"\n        ...\n\n    @property\n    def current_time(self) -&gt; float:\n        \"\"\"Get the current simulation time.\n\n        Returns:\n            The current simulation time in seconds.\n        \"\"\"\n        ...\n\n    @property\n    def is_running(self) -&gt; bool:\n        \"\"\"Check if the timeline is currently running.\n\n        Returns:\n            True if the timeline is running, False otherwise.\n        \"\"\"\n        ...\n\n### Event\n\n```python\nclass Event:\n    \"\"\"Represents an event that occurs at a specific time.\n\n    Events are the basic building blocks of a timeline. Each event has a timestamp\n    and a callback function that gets called when the event is processed.\n    \"\"\"\n\n    def __init__(self, timestamp: float, callback: Callable, data: Any = None):\n        \"\"\"Initialize a new Event.\n\n        Args:\n            timestamp: When the event should occur (in simulation time).\n            callback: Function to call when the event is processed.\n            data: Optional data to pass to the callback.\n        \"\"\"\n        ...\n\n    def trigger(self) -&gt; None:\n        \"\"\"Trigger the event's callback.\"\"\"\n        ...\n\n    @property\n    def timestamp(self) -&gt; float:\n        \"\"\"Get the event's timestamp.\"\"\"\n        ...\n\n    @property\n    def data(self) -&gt; Any:\n        \"\"\"Get the event's data.\"\"\"\n        ...\n</code></pre>"},{"location":"api/#cli-reference","title":"CLI Reference","text":"<p>Chronovyan provides a command-line interface for basic timeline operations:</p> <pre><code># Show help\nchronovyan --help\n\n# Create and run a simple timeline\nchronovyan run --event \"0.5:print('Hello after 0.5s')\" --event \"1.0:print('Hello after 1.0s')\"\n\n# Run a timeline from a JSON file\nchronovyan run --file timeline.json\n\n# List available commands\nchronovyan --help\n</code></pre>"},{"location":"api/#example-usage","title":"Example Usage","text":""},{"location":"api/#creating-a-timeline","title":"Creating a Timeline","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef callback(data):\n    print(f\"Event triggered with data: {data}\")\n\ntimeline = Timeline()\nevent1 = Event(1.0, callback, \"First event\")\nevent2 = Event(2.0, callback, \"Second event\")\n\ntimeline.add_event(event2)\ntimeline.add_event(event1)  # Events will be processed in timestamp order\n\ntimeline.run()\n</code></pre>"},{"location":"api/#using-dependencies-between-events","title":"Using Dependencies Between Events","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef setup_event(timeline):\n    def callback(data):\n        print(f\"Processing {data}\")\n        # Schedule another event\n        timeline.add_event(Event(timeline.current_time + 1.0, callback, f\"Child of {data}\"))\n\n    return Event(0.0, callback, \"Initial event\")\n\ntimeline = Timeline()\ntimeline.add_event(setup_event(timeline))\ntimeline.run(until=5.0)  # Run for 5 seconds of simulation time\n</code></pre>"},{"location":"api/#type-definitions","title":"Type Definitions","text":""},{"location":"api/#callback-protocol","title":"Callback Protocol","text":"<pre><code>from typing import Protocol, Any, Optional\n\nclass EventCallback(Protocol):\n    def __call__(self, data: Any) -&gt; None:\n        \"\"\"Callback function type for event processing.\n\n        Args:\n            data: The data associated with the event.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api/#constants","title":"Constants","text":"<ul> <li><code>VERSION</code>: Current version of the Chronovyan library</li> <li><code>DEFAULT_TIMESTEP</code>: Default time step used for simulation (0.01 seconds)</li> </ul>"},{"location":"api/#exceptions","title":"Exceptions","text":""},{"location":"api/#chronovyanerror","title":"ChronovyanError","text":"<p>Base class for all Chronovyan-specific exceptions.</p>"},{"location":"api/#timelineerror","title":"TimelineError","text":"<p>Raised for errors related to timeline operations.</p>"},{"location":"api/#eventerror","title":"EventError","text":"<p>Raised for errors related to event operations.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":""},{"location":"examples/#creating-a-simple-timeline","title":"Creating a Simple Timeline","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef log_event(data):\n    print(f\"[{timeline.current_time:.2f}s] {data}\")\n\n# Create a new timeline\ntimeline = Timeline()\n\n# Add some events\ntimeline.add_event(Event(1.0, log_event, \"First event\"))\ntimeline.add_event(Event(3.0, log_event, \"Second event\"))\ntimeline.add_event(Event(2.0, log_event, \"Third event\"))  # Will be reordered\n\n# Run the timeline\ntimeline.run()\n\n# Output:\n# [1.00s] First event\n# [2.00s] Third event\n# [3.00s] Second event\n</code></pre>"},{"location":"examples/#event-dependencies","title":"Event Dependencies","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef setup_dependencies():\n    timeline = Timeline()\n\n    def create_printer(msg):\n        def printer(_):\n            print(f\"[{timeline.current_time:.2f}s] {msg}\")\n        return printer\n\n    # Create events with dependencies\n    event_a = Event(1.0, create_printer(\"Event A\"))\n    event_b = Event(2.0, create_printer(\"Event B\"))\n\n    # Event C depends on A and B\n    def event_c_callback(_):\n        print(f\"[{timeline.current_time:.2f}s] Event C (depends on A &amp; B)\")\n\n    event_c = Event(3.0, event_c_callback)\n\n    timeline.add_event(event_a)\n    timeline.add_event(event_b)\n    timeline.add_event(event_c)\n\n    return timeline\n\n# Run the timeline with dependencies\ntimeline = setup_dependencies()\ntimeline.run()\n</code></pre>"},{"location":"examples/#advanced-usage","title":"Advanced Usage","text":""},{"location":"examples/#periodic-events","title":"Periodic Events","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef create_periodic_printer(timeline, interval, count, prefix):\n    def callback(_):\n        nonlocal count\n        if count &gt; 0:\n            print(f\"[{timeline.current_time:.2f}s] {prefix} {count}\")\n            count -= 1\n            # Schedule the next occurrence\n            timeline.add_event(Event(timeline.current_time + interval, callback, None))\n\n    return callback\n\n# Create a timeline with periodic events\ntimeline = Timeline()\ntimeline.add_event(Event(0.0, create_periodic_printer(timeline, 1.0, 5, \"Tick:\")))\ntimeline.run()\n</code></pre>"},{"location":"examples/#timeout-pattern","title":"Timeout Pattern","text":"<pre><code>from chronovyan import Timeline, Event\n\ndef setup_timeout():\n    timeline = Timeline()\n\n    def on_timeout():\n        print(f\"[{timeline.current_time:.2f}s] Operation timed out!\")\n        timeline.stop()\n\n    def long_running_operation():\n        print(f\"[{timeline.current_time:.2f}s] Starting long operation...\")\n        # Simulate work by scheduling completion after 3 seconds\n        timeline.add_event(Event(timeline.current_time + 3.0, lambda _: print(\"Operation completed!\")))\n\n    # Set a timeout for 2 seconds\n    timeline.add_event(Event(2.0, lambda _: on_timeout()))\n\n    # Start the operation\n    timeline.add_event(Event(0.1, lambda _: long_running_operation()))\n\n    return timeline\n\n# This will time out after 2 seconds\nsetup_timeout().run()\n</code></pre>"},{"location":"examples/#real-world-examples","title":"Real-world Examples","text":""},{"location":"examples/#network-request-simulation","title":"Network Request Simulation","text":"<pre><code>from chronovyan import Timeline, Event\nimport random\n\ndef simulate_network_request(timeline, url, callback):\n    \"\"\"Simulate a network request with random latency.\"\"\"\n    latency = random.uniform(0.1, 2.0)  # Random latency between 0.1 and 2.0 seconds\n\n    def process_response():\n        # Simulate success or failure\n        success = random.random() &gt; 0.3  # 70% success rate\n        if success:\n            response = f\"Response from {url} (took {latency:.2f}s)\"\n        else:\n            response = f\"Error fetching {url} (took {latency:.2f}s)\"\n        callback(response, success)\n\n    # Schedule the response\n    timeline.add_event(Event(timeline.current_time + latency, \n                           lambda _: process_response()))\n\ndef run_requests():\n    timeline = Timeline()\n    urls = [\"https://api.example.com/data/1\",\n            \"https://api.example.com/data/2\",\n            \"https://api.example.com/data/3\"]\n\n    def handle_response(response, success):\n        status = \"\u2713\" if success else \"\u2717\"\n        print(f\"[{timeline.current_time:.2f}s] {status} {response}\")\n\n    # Start all requests at once\n    for url in urls:\n        simulate_network_request(timeline, url, handle_response)\n\n    return timeline\n\n# Run the simulation\nrun_requests().run()\n</code></pre>"},{"location":"examples/#game-loop-simulation","title":"Game Loop Simulation","text":"<pre><code>from chronovyan import Timeline, Event\nimport random\n\nclass Game:\n    def __init__(self):\n        self.timeline = Timeline()\n        self.player_health = 100\n        self.enemy_health = 100\n        self.game_over = False\n\n    def player_attack(self, _):\n        if self.game_over:\n            return\n\n        damage = random.randint(5, 15)\n        self.enemy_health -= damage\n        print(f\"Player attacks! Dealt {damage} damage. Enemy health: {max(0, self.enemy_health)}\")\n\n        if self.enemy_health &lt;= 0:\n            print(\"Player wins!\")\n            self.game_over = True\n            self.timeline.stop()\n        else:\n            # Schedule enemy's turn\n            self.timeline.add_event(Event(\n                self.timeline.current_time + 1.0,\n                self.enemy_attack\n            ))\n\n    def enemy_attack(self, _):\n        if self.game_over:\n            return\n\n        damage = random.randint(3, 12)\n        self.player_health -= damage\n        print(f\"Enemy attacks! Dealt {damage} damage. Your health: {max(0, self.player_health)}\")\n\n        if self.player_health &lt;= 0:\n            print(\"Game Over! You were defeated.\")\n            self.game_over = True\n            self.timeline.stop()\n        else:\n            # Schedule player's turn\n            print(\"\\nYour turn! Press Enter to attack...\")\n            # In a real game, you'd wait for player input here\n            # For this example, we'll automatically attack after a delay\n            self.timeline.add_event(Event(\n                self.timeline.current_time + 0.5,\n                self.player_attack\n            ))\n\n    def start(self):\n        print(\"Game started! It's your turn first.\")\n        self.timeline.add_event(Event(0.0, self.player_attack))\n        self.timeline.run()\n\n# Start the game\ngame = Game()\ngame.start()\n</code></pre>"},{"location":"examples/#performance-considerations","title":"Performance Considerations","text":""},{"location":"examples/#efficient-event-creation","title":"Efficient Event Creation","text":"<p>When creating many events, consider these optimizations:</p> <pre><code># Less efficient: Creating many small callbacks\ndef create_events_slow(timeline, count):\n    for i in range(count):\n        timeline.add_event(Event(\n            i * 0.1,\n            lambda _, i=i: print(f\"Event {i}\")  # Note the i=i to capture the loop variable\n        ))\n\n# More efficient: Batch similar events\ndef create_events_fast(timeline, count):\n    def batch_handler(event_data):\n        for data in event_data:\n            print(f\"Event {data}\")\n\n    # Group events by time and process in batches\n    event_data = [(i * 0.1, i) for i in range(count)]\n    timeline.add_event(Event(0.0, lambda _: batch_handler([d[1] for d in event_data])))\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#using-with-asyncio","title":"Using with asyncio","text":"<pre><code>import asyncio\nfrom chronovyan import Timeline, Event\n\nasync def run_timeline_with_asyncio(timeline):\n    loop = asyncio.get_event_loop()\n\n    def run_timeline():\n        timeline.run()\n\n    # Run the timeline in a thread pool\n    await loop.run_in_executor(None, run_timeline)\n\n# Example usage\nasync def main():\n    timeline = Timeline()\n    timeline.add_event(Event(1.0, lambda _: print(\"Async event!\")))\n\n    # Run other asyncio tasks concurrently\n    await asyncio.gather(\n        run_timeline_with_asyncio(timeline),\n        asyncio.sleep(2.0)\n    )\n\n# Run the asyncio event loop\nasyncio.run(main())\n</code></pre>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This section covers the fundamental concepts behind Chronovyan and how they work together.</p>"},{"location":"concepts/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Timelines</li> <li>Events</li> <li>Callbacks</li> <li>Synchronization</li> <li>Time Management</li> </ul>"},{"location":"concepts/#timelines","title":"Timelines","text":"<p>A <code>Timeline</code> is the central concept in Chronovyan. It represents a sequence of events that occur over time. You can think of it as a timeline where events are scheduled to happen at specific times.</p> <p>Key features of Timelines:</p> <ul> <li>Ordered Execution: Events are executed in chronological order</li> <li>Time Management: Supports both relative and absolute timing</li> <li>Thread Safety: Can be accessed from multiple threads safely</li> </ul>"},{"location":"concepts/#events","title":"Events","text":"<p>Events are the building blocks of Chronovyan programs. They represent something that happens at a specific point in time.</p> <p>Types of events:</p> <ol> <li>Basic Events: Simple events with a name and optional data</li> <li>Timed Events: Events that occur after a delay or at a specific time</li> <li>Recurring Events: Events that repeat at regular intervals</li> </ol>"},{"location":"concepts/#callbacks","title":"Callbacks","text":"<p>Callbacks are functions that get called when an event occurs. They allow you to execute custom code in response to events.</p> <p>Example:</p> <pre><code>def on_event(event):\n    print(f\"Event occurred: {event.name}\")\n\nevent = cv.Event(\"Test Event\", on_trigger=on_event)\n</code></pre>"},{"location":"concepts/#synchronization","title":"Synchronization","text":"<p>Chronovyan provides tools for synchronizing events across different parts of your application:</p> <ul> <li>Barriers: Synchronize multiple timelines</li> <li>Conditions: Wait for specific conditions to be met</li> <li>Locks: Protect shared resources</li> </ul>"},{"location":"concepts/#time-management","title":"Time Management","text":"<p>Chronovyan provides flexible time management:</p> <ul> <li>Wall Time: Real-world time</li> <li>Simulation Time: Virtual time for testing</li> <li>Time Scaling: Speed up or slow down time</li> </ul>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Set up Chronovyan</li> <li>API Reference - Detailed API documentation</li> <li>Examples - Practical examples of Chronovyan in action</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This section contains practical examples of using Chronovyan for various tasks.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":"<ul> <li>Hello World - A simple introduction to Chronovyan</li> <li>Event Handling - How to work with events</li> <li>Timing and Delays - Managing time in Chronovyan</li> </ul>"},{"location":"examples/#intermediate-examples","title":"Intermediate Examples","text":"<ul> <li>Multiple Timelines - Working with concurrent timelines</li> <li>Event Synchronization - Synchronizing events across timelines</li> <li>Custom Events - Creating custom event types</li> </ul>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":"<ul> <li>Animation - Creating animations with Chronovyan</li> <li>Simulations - Building simulations</li> <li>Game Development - Game development examples</li> </ul>"},{"location":"examples/#getting-started-with-examples","title":"Getting Started with Examples","text":"<p>To run these examples, first make sure you have Chronovyan installed:</p> <pre><code>pip install chronovyan\n</code></pre> <p>Then, you can copy and paste the example code into a Python file and run it:</p> <pre><code>python example.py\n</code></pre>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>We welcome contributions of new examples! If you've created an example that you'd like to share, please open a pull request on GitHub.</p>"},{"location":"examples/hello_world/","title":"Hello World Example","text":"<p>This is a simple \"Hello World\" example to get you started with Chronovyan.</p>"},{"location":"examples/hello_world/#the-code","title":"The Code","text":"<pre><code>import chronovyan as cv\n\ndef say_hello(event):\n    print(f\"{event.name} at {event.timestamp:.2f} seconds\")\n\ndef main():\n    print(\"Starting Chronovyan Hello World example...\")\n\n    # Create a new timeline\n    timeline = cv.Timeline()\n\n    # Add some events\n    timeline.add_event(cv.Event(\"Hello\", on_trigger=say_hello))\n    timeline.add_event(cv.Event(\"World\", delay=1.0, on_trigger=say_hello))\n\n    # Run the timeline\n    print(\"Running timeline...\")\n    timeline.run()\n    print(\"Timeline complete!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/hello_world/#explanation","title":"Explanation","text":"<ol> <li> <p>Import the library: We start by importing the Chronovyan library.</p> </li> <li> <p>Create a callback function: The <code>say_hello</code> function will be called when each event is triggered.</p> </li> <li> <p>Create a timeline: The <code>Timeline</code> object will manage our events.</p> </li> <li> <p>Add events: We add two events to the timeline:</p> </li> <li>The first event says \"Hello\" immediately</li> <li> <p>The second event says \"World\" after a 1-second delay</p> </li> <li> <p>Run the timeline: The <code>run()</code> method starts the timeline and processes all events.</p> </li> </ol>"},{"location":"examples/hello_world/#expected-output","title":"Expected Output","text":"<p>When you run this code, you should see output similar to:</p> <pre><code>Starting Chronovyan Hello World example...\nRunning timeline...\nHello at 0.00 seconds\nWorld at 1.00 seconds\nTimeline complete!\n</code></pre>"},{"location":"examples/hello_world/#next-steps","title":"Next Steps","text":"<ul> <li>Try modifying the delays between events</li> <li>Add more events to the timeline</li> <li>Experiment with different callback functions</li> <li>Check out the Event Handling example for more advanced usage</li> </ul>"},{"location":"getting-started/first-steps/","title":"First Steps with Chronovyan","text":"<p>Welcome to Chronovyan! This guide will help you take your first steps with the language.</p>"},{"location":"getting-started/first-steps/#your-first-chronovyan-program","title":"Your First Chronovyan Program","text":"<p>Let's create a simple Chronovyan program to get started:</p> <pre><code>import chronovyan as cv\n\n# Create a new timeline\ntimeline = cv.Timeline()\n\n# Add an event to the timeline\ntimeline.add_event(\"Hello, Chronovyan!\")\n\n# Run the timeline\ntimeline.run()\n</code></pre>"},{"location":"getting-started/first-steps/#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/first-steps/#1-timelines","title":"1. Timelines","text":"<p>A <code>Timeline</code> is a sequence of events that occur over time. You can add events to a timeline and then execute them in order.</p> <pre><code>timeline = cv.Timeline()\n\n# Add events with delays\ntimeline.add_event(\"First event\", delay=1.0)  # 1 second delay\ntimeline.add_event(\"Second event\")           # No delay\n\n# Run the timeline\ntimeline.run()\n</code></pre>"},{"location":"getting-started/first-steps/#2-events","title":"2. Events","text":"<p>Events are the building blocks of Chronovyan programs. They can be simple strings or more complex objects.</p> <pre><code># Simple event\nevent1 = cv.Event(\"A simple event\")\n\n# Event with data\nevent2 = cv.Event(\"Event with data\", data={\"key\": \"value\"})\n\n# Add events to timeline\ntimeline.add_event(event1)\ntimeline.add_event(event2)\n</code></pre>"},{"location":"getting-started/first-steps/#3-callbacks","title":"3. Callbacks","text":"<p>You can attach callbacks to events to perform actions when they occur.</p> <pre><code>def on_event(event):\n    print(f\"Event occurred: {event.name}\")\n    print(f\"Event data: {event.data}\")\n\n# Create an event with a callback\nevent = cv.Event(\"Event with callback\", on_trigger=on_event)\ntimeline.add_event(event)\n</code></pre>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<p>Now that you've taken your first steps with Chronovyan, you can explore:</p> <ul> <li>Advanced Features - Learn about more advanced capabilities</li> <li>API Reference - Detailed documentation of all classes and methods</li> <li>Core Concepts - Deep dive into Chronovyan's architecture</li> </ul>"},{"location":"getting-started/first-steps/#need-help","title":"Need Help?","text":"<p>If you have any questions or run into issues, feel free to open an issue on GitHub.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Chronovyan on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>Git (for development)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<p>The easiest way to install Chronovyan is using pip:</p> <pre><code>pip install chronovyan\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>If you want to install the latest development version:</p> <pre><code># Clone the repository\ngit clone https://github.com/Chronovyan/Chronovyan.github.io.git\ncd Chronovyan\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installation, you can verify that Chronovyan is installed correctly by running:</p> <pre><code>python -c \"import chronovyan; print('Chronovyan version:', chronovyan.__version__)\"\n</code></pre>"},{"location":"getting-started/installation/#updating-chronovyan","title":"Updating Chronovyan","text":"<p>To update Chronovyan to the latest version:</p> <pre><code>pip install --upgrade chronovyan\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Permission Errors: If you encounter permission errors, try installing with the <code>--user</code> flag:    <pre><code>pip install --user chronovyan\n</code></pre></p> </li> <li> <p>Python Version: Ensure you're using Python 3.8 or higher. Check your Python version with:    <pre><code>python --version\n</code></pre></p> </li> <li> <p>Dependencies: If you encounter dependency issues, try:    <pre><code>pip install --upgrade pip setuptools wheel\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Chronovyan installed, check out the First Steps guide to start using it!</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with Chronovyan as quickly as possible.</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<pre><code>pip install chronovyan\n</code></pre>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#1-import-chronovyan","title":"1. Import Chronovyan","text":"<pre><code>import chronovyan as cv\n</code></pre>"},{"location":"getting-started/quickstart/#2-create-a-timeline","title":"2. Create a Timeline","text":"<pre><code>timeline = cv.Timeline()\n</code></pre>"},{"location":"getting-started/quickstart/#3-add-events","title":"3. Add Events","text":"<pre><code># Add a simple event\ntimeline.add_event(\"Hello, World!\")\n\n# Add an event with a delay\ntimeline.add_event(\"This happens after 1 second\", delay=1.0)\n</code></pre>"},{"location":"getting-started/quickstart/#4-run-the-timeline","title":"4. Run the Timeline","text":"<pre><code>timeline.run()\n</code></pre>"},{"location":"getting-started/quickstart/#example-simple-animation","title":"Example: Simple Animation","text":"<p>Here's a simple example that creates a timeline with multiple events:</p> <pre><code>import chronovyan as cv\n\ndef print_message(event):\n    print(f\"At {event.timestamp:.2f}s: {event.name}\")\n\n# Create a new timeline\ntimeline = cv.Timeline()\n\n# Add some events\ntimeline.add_event(cv.Event(\"Start\", on_trigger=print_message))\ntimeline.add_event(cv.Event(\"Processing...\", delay=0.5, on_trigger=print_message))\ntimeline.add_event(cv.Event(\"Almost done\", delay=1.0, on_trigger=print_message))\ntimeline.add_event(cv.Event(\"Complete!\", delay=1.5, on_trigger=print_message))\n\n# Run the timeline\nprint(\"Starting timeline...\")\ntimeline.run()\nprint(\"Timeline complete!\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more in the First Steps guide</li> <li>Explore the API Reference</li> <li>Check out the examples for more complex use cases</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>This section provides detailed documentation for the Chronovyan API.</p>"},{"location":"reference/#core-classes","title":"Core Classes","text":""},{"location":"reference/#timeline","title":"Timeline","text":"<p>The main class for managing a sequence of events.</p>"},{"location":"reference/#methods","title":"Methods","text":"<ul> <li><code>add_event(event, delay=0.0)</code>: Add an event to the timeline</li> <li><code>run()</code>: Execute all events in the timeline</li> <li><code>pause()</code>: Pause the timeline</li> <li><code>resume()</code>: Resume a paused timeline</li> <li><code>stop()</code>: Stop the timeline execution</li> </ul>"},{"location":"reference/#properties","title":"Properties","text":"<ul> <li><code>is_running</code>: Whether the timeline is currently running</li> <li><code>current_time</code>: The current time in the timeline</li> <li><code>event_count</code>: Number of events in the timeline</li> </ul>"},{"location":"reference/#event","title":"Event","text":"<p>Represents an event in the timeline.</p>"},{"location":"reference/#constructor","title":"Constructor","text":"<pre><code>Event(name, data=None, on_trigger=None, delay=0.0)\n</code></pre>"},{"location":"reference/#properties_1","title":"Properties","text":"<ul> <li><code>name</code>: The name of the event</li> <li><code>data</code>: Optional data associated with the event</li> <li><code>timestamp</code>: When the event is scheduled to occur</li> <li><code>is_triggered</code>: Whether the event has been triggered</li> </ul>"},{"location":"reference/#utility-functions","title":"Utility Functions","text":""},{"location":"reference/#time-utilities","title":"Time Utilities","text":"<ul> <li><code>get_current_time()</code>: Get the current time in the timeline</li> <li><code>sleep(seconds)</code>: Sleep for the specified number of seconds</li> </ul>"},{"location":"reference/#examples","title":"Examples","text":""},{"location":"reference/#creating-and-running-a-timeline","title":"Creating and Running a Timeline","text":"<pre><code>import chronovyan as cv\n\ndef on_event(event):\n    print(f\"Event: {event.name}\")\n\n# Create a timeline\ntimeline = cv.Timeline()\n\n# Add some events\ntimeline.add_event(cv.Event(\"Start\", on_trigger=on_event))\ntimeline.add_event(cv.Event(\"Middle\", on_trigger=on_event, delay=1.0))\ntimeline.add_event(cv.Event(\"End\", on_trigger=on_event, delay=2.0))\n\n# Run the timeline\ntimeline.run()\n</code></pre>"},{"location":"reference/#advanced-topics","title":"Advanced Topics","text":""},{"location":"reference/#custom-events","title":"Custom Events","text":"<p>You can create custom event types by subclassing <code>Event</code>:</p> <pre><code>class CustomEvent(cv.Event):\n    def __init__(self, name, custom_data, **kwargs):\n        super().__init__(name, **kwargs)\n        self.custom_data = custom_data\n\n    def trigger(self):\n        print(f\"Custom event triggered with data: {self.custom_data}\")\n        super().trigger()\n\n# Usage\nevent = CustomEvent(\"Custom\", custom_data=42, delay=1.0)\ntimeline.add_event(event)\n</code></pre>"},{"location":"reference/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started - Set up Chronovyan</li> <li>Core Concepts - Learn about Chronovyan's architecture</li> <li>Examples - Practical examples of Chronovyan in action</li> </ul>"}]}