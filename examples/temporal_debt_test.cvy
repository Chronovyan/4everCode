/*
 ____  _                                              
/  __\| |__  _ __ ___  _ __   _____   ___   __ _ _ __  
| /   |  _ \| '__/ _ \| '_ \ / _ \ \ / / | | | '_  \/ _ \ 
| \__ | | | | | | (_) | | | | (_) \ V /| |_| | | | |  __/ 
\____|_| |_|_|  \___/|_| |_|\___/ \_/  \__, |_| |_|\___| 
                                       |___/             
*/

// Temporal Debt System Test
// This demonstrates the temporal debt system in Chronovyan

// Import standard library
import "chrono.core";

func main() {
    // Display initial resource levels
    print("--- Initial Resource Levels ---");
    print("Chronons: " + GET_CHRONONS_LEVEL());
    print("Aethel: " + GET_AETHEL_LEVEL());
    print("");
    
    // Check initial debt status
    print("--- Initial Debt Status ---");
    var status = GET_DEBT_STATUS();
    print("Chronons Debt: " + status["chronons_debt"]);
    print("Aethel Debt: " + status["aethel_debt"]);
    print("Debt Limit: " + status["debt_limit"]);
    print("Stability: " + status["stability"]);
    print("");
    
    // Borrow chronons
    print("--- Borrowing Chronons ---");
    var success = BORROW_CHRONONS(50.0, "temporal_branch_operation", false);
    print("Borrow success: " + success);
    print("New Chronons level: " + GET_CHRONONS_LEVEL());
    print("");
    
    // Check debt status after borrowing
    print("--- Debt Status After Borrowing ---");
    status = GET_DEBT_STATUS();
    print("Chronons Debt: " + status["chronons_debt"]);
    print("Aethel Debt: " + status["aethel_debt"]);
    print("Stability: " + status["stability"]);
    print("");
    
    // Advance the debt cycle a few times
    print("--- Advancing Debt Cycle ---");
    for (var i = 0; i < 3; i++) {
        var paradoxes = ADVANCE_DEBT_CYCLE();
        print("Cycle advanced. Paradoxes created: " + paradoxes);
        status = GET_DEBT_STATUS();
        print("Current Chronons Debt: " + status["chronons_debt"]);
        print("Stability: " + status["stability"]);
    }
    print("");
    
    // Borrow aethel with critical flag
    print("--- Borrowing Critical Aethel ---");
    success = BORROW_AETHEL(75.0, "critical_merge_operation", true);
    print("Borrow success: " + success);
    print("New Aethel level: " + GET_AETHEL_LEVEL());
    print("");
    
    // Advance the debt cycle past the due date for the critical debt
    print("--- Testing Critical Debt Paradoxes ---");
    for (var i = 0; i < 3; i++) {
        var paradoxes = ADVANCE_DEBT_CYCLE();
        print("Cycle advanced. Paradoxes created: " + paradoxes);
        status = GET_DEBT_STATUS();
        print("Current Stability: " + status["stability"]);
    }
    print("");
    
    // Repay some of the chronon debt
    print("--- Repaying Chronon Debt ---");
    var repaid = REPAY_CHRONONS(30.0);
    print("Amount repaid: " + repaid);
    print("New Chronons level: " + GET_CHRONONS_LEVEL());
    status = GET_DEBT_STATUS();
    print("Remaining Chronons Debt: " + status["chronons_debt"]);
    print("");
    
    // Attempt to borrow beyond debt limit
    print("--- Testing Debt Limit ---");
    success = BORROW_CHRONONS(1000.0, "beyond_limit_operation", false);
    print("Borrow beyond limit success: " + success);
    print("");
    
    // Display final debt status
    print("--- Final Debt Status ---");
    status = GET_DEBT_STATUS();
    print("Chronons Debt: " + status["chronons_debt"]);
    print("Aethel Debt: " + status["aethel_debt"]);
    print("Past Due Count: " + status["past_due_count"]);
    print("Stability: " + status["stability"]);
    print("");
    
    print("--- Individual Debts ---");
    var debts = status["debts"];
    for (var i = 0; i < debts.size(); i++) {
        var debt = debts[i];
        print("Debt #" + i);
        print("  Operation: " + debt["operation_id"]);
        print("  Chronon Debt: " + debt["chronon_debt"]);
        print("  Aethel Debt: " + debt["aethel_debt"]);
        print("  Interest Rate: " + (debt["interest_rate"] * 100) + "%");
        print("  Due Cycle: " + debt["due_cycle"]);
        print("  Critical: " + debt["critical"]);
    }
    
    return 0;
} 