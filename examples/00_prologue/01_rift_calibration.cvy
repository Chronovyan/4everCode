// Chronovyan Example: Rift Calibration Snippets (Thorne's Terminal)
// Difficulty: Prologue Interaction
// Concepts: Variable observation/modification, simple command/function execution
// Note: This code is interacted with on a terminal, not written by the player in Phase 0.

//------------------------------------------------------------------------------
// PART 1: Visible on Thorne's Terminal - This is what Alex initially sees
//------------------------------------------------------------------------------

// --- Thorne's Dimensional Resonance Project - Log 7.3 ---
// System Status: Standby. Rift Calibrator Array awaiting alignment.
// Current Parameters:

// This variable is highlighted and modifiable by Alex in the prologue
// Alex will change this from 35 to 75 based on the notes
var rift_focus_intensity = 35; // Default. Range: 0-100. Critical for stable aperture.

// These variables are visible but not meant to be modified by Alex in the prologue
var target_dimension_vector = [4.7, 8.1, -2.3, 0.99]; // Do NOT alter without full recalibration!
var temporal_phase_angle = 12.7; // Degrees. Sensitive.

// --- Primary Calibration Sequence ---
// To initiate, ensure rift_focus_intensity is optimal (target: 70-80).
// Then, execute: 'initiate_calibration_pulse(rift_focus_intensity)'.
// Monitor harmonic resonator feedback.
// CAUTION: Unstable intensity may lead to unpredictable field effects.

//------------------------------------------------------------------------------
// PART 2: System Internal Functions - Not visible to Alex, but executed when
// the initiate_calibration_pulse command is run
//------------------------------------------------------------------------------

// This function is called when Alex types initiate_calibration_pulse(rift_focus_intensity)
// It's not visible in the prologue but represents what happens in the system
function initiate_calibration_pulse(intensity_value as Number) {
    // Basic validation
    if (intensity_value < 0 || intensity_value > 100) {
        return "ERROR: Intensity value out of range (0-100)";
    }
    
    // Output to terminal
    print("Initializing calibration pulse with intensity " + intensity_value + "...");
    print("Pulse sequence engaged.");
    
    // Simulate feedback based on intensity value
    var resonance_stability = "";
    for (var i = 0; i < Math.min(10, intensity_value / 10); i++) {
        resonance_stability += "[]";
    }
    print("Harmonic Resonator Feedback: " + resonance_stability + " Resonance " + 
          (intensity_value >= 70 && intensity_value <= 80 ? "stable" : "unstable") + ".");
    
    // The accidental rift trigger that happens when intensity is in the "perfect" range
    // This is what causes the dramatic events of the prologue
    if (intensity_value > 70 && intensity_value < 85) {
        // Short delay to build tension
        wait(2000);
        print("...");
        // Warnings appear as the experiment goes wrong
        print("WARNING: Unexpected energy surge detected in primary conduit!");
        wait(500);
        print("WARNING: Containment field fluctuating!");
        wait(1000);
        print("CRITICAL: Dimensional aperture forming! Evacuate! Evacuate!");
        
        // Trigger the hidden function that creates the rift
        activate_emergency_rift_protocol_UNSTABLE(intensity_value, target_dimension_vector);
    }
    
    return true;
}

// This function represents the system's internal process that creates the portal
// It's completely hidden from the player and is only included here to show
// what might be happening "behind the scenes" in the game narrative
function activate_emergency_rift_protocol_UNSTABLE(intensity as Number, vector as Array) {
    // Calculate rift stability based on input parameters
    var stability_factor = intensity * 0.01 * vector[3];
    
    // Determine rift characteristics based on vector coordinates
    var target_dimension = {
        x_coord: vector[0],
        y_coord: vector[1],
        z_coord: vector[2],
        temporal_shift: vector[3] * temporal_phase_angle
    };
    
    // These values represent what would be happening in the game's narrative
    // as the portal forms and pulls Alex and CORA through
    var rift_diameter = intensity * 0.15; // meters
    var energy_output = Math.pow(intensity, 2) * 1.8; // megajoules
    var stability_duration = stability_factor * 12; // seconds
    
    // In the actual game, this would trigger cinematic events and
    // transition to the next phase of the tutorial
    return {
        status: "RIFT_FORMED",
        target: "CHRONOVYA",
        stability: stability_factor,
        collapse_timer: stability_duration,
        safety_protocols: "BYPASSED"
    };
}

//------------------------------------------------------------------------------
// PART 3: Expected output when Alex runs the command with intensity value 75
//------------------------------------------------------------------------------

/* 
Output shown on terminal:
> initiate_calibration_pulse(75)
Initializing calibration pulse with intensity 75...
Pulse sequence engaged.
Harmonic Resonator Feedback: [][][][][][][] Resonance stable.
...
WARNING: Unexpected energy surge detected in primary conduit!
WARNING: Containment field fluctuating!
CRITICAL: Dimensional aperture forming! Evacuate! Evacuate!
*/ 