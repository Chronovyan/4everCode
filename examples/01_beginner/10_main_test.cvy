// Chronovyan Learning Example: Variables and Scope
// Difficulty: Beginner
// Concepts: Variable declaration, variable scope, constants, shadows
//
// This example demonstrates how variables work in Chronovyan,
// including their scope, visibility, and how they can be modified
// or protected from changes.

// Global variables - accessible throughout the program
global_power_level = 100
global_location = "Base Camp"

// Constants - values that cannot be changed
const MAXIMUM_POWER = 1000
const MINIMUM_OXYGEN = 18.5
const CHRONOVYAN_YEAR = 436 // Chronovyan year in Earth days

// Function that demonstrates local scope
function calculate_resource_needs(person_count, days) {
    // Local variables - only accessible within this function
    water_per_person = 2.5 // liters per day
    food_per_person = 2000 // calories per day
    
    // Calculations using local and global variables
    total_water_needed = water_per_person * person_count * days
    total_food_needed = food_per_person * person_count * days
    
    // Using a global variable inside the function
    print_to_cora("Calculating resources needed at: " + global_location)
    
    // Return multiple values as an object
    return {
        "water": total_water_needed,
        "food": total_food_needed
    }
}

// Main program execution
print_to_cora("=== VARIABLE DEMONSTRATION ===")

// Display global variables
print_to_cora("Initial power level: " + global_power_level)
print_to_cora("Current location: " + global_location)

// Display constants
print_to_cora("Maximum power capacity: " + MAXIMUM_POWER)
print_to_cora("Minimum safe oxygen: " + MINIMUM_OXYGEN + "%")
print_to_cora("Chronovyan year: " + CHRONOVYAN_YEAR + " Earth days")

// Call the function and store the returned values
resources = calculate_resource_needs(2, 7)

// Access the returned values
print_to_cora("Water needed: " + resources.water + " liters")
print_to_cora("Food needed: " + resources.food + " calories")

// Variables can be modified
global_power_level = global_power_level - 10
print_to_cora("Updated power level: " + global_power_level)

// Variable shadowing demonstration
function demonstrate_shadowing() {
    // This local variable "shadows" the global one with the same name
    global_power_level = 50
    print_to_cora("Inside function, power level: " + global_power_level)
    
    // Local variable only exists inside this function
    local_data = "This variable only exists here"
    print_to_cora(local_data)
}

// Call the shadowing demonstration
demonstrate_shadowing()

// The global variable retains its value outside the function
print_to_cora("Outside function, power level: " + global_power_level)

// This would cause an error if uncommented, as local_data only exists in the function
// print_to_cora(local_data)

// Variable types can change (dynamic typing)
flexible_var = 42
print_to_cora("Variable initially holds number: " + flexible_var)
flexible_var = "Now I'm a string"
print_to_cora("Same variable now holds text: " + flexible_var)

// Expected Output:
// === VARIABLE DEMONSTRATION ===
// Initial power level: 100
// Current location: Base Camp
// Maximum power capacity: 1000
// Minimum safe oxygen: 18.5%
// Chronovyan year: 436 Earth days
// Calculating resources needed at: Base Camp
// Water needed: 35 liters
// Food needed: 28000 calories
// Updated power level: 90
// Inside function, power level: 50
// This variable only exists here
// Outside function, power level: 90
// Variable initially holds number: 42
// Same variable now holds text: Now I'm a string