// Chronovyan Learning Example: Boolean Logic Operations
// Difficulty: Beginner
// Concepts: Boolean values, logical operations, comparison operators
//
// This example demonstrates how to use boolean operations in Chronovyan,
// which are essential for decision-making in programs that CORA and Alex
// might use for survival on Chronovya.

// Boolean values represent true/false states
is_safe = true                // This area is safe
has_resources = true          // Resources are available here
is_temporal_rift = false      // No temporal rift present
night_time = false            // It's currently daytime

// Display the boolean values
print_to_cora("Area safety: " + is_safe)
print_to_cora("Resources present: " + has_resources)
print_to_cora("Temporal rift: " + is_temporal_rift)
print_to_cora("Night time: " + night_time)

// Logical AND operation (&&) - both conditions must be true
can_collect_resources = is_safe && has_resources
print_to_cora("Can collect resources: " + can_collect_resources)  // true

// Logical OR operation (||) - at least one condition must be true
should_leave = is_temporal_rift || night_time
print_to_cora("Should leave area: " + should_leave)  // false

// Logical NOT operation (!) - inverts the boolean value
should_stay = !should_leave
print_to_cora("Should stay in area: " + should_stay)  // true

// Complex boolean expressions
is_ideal_conditions = is_safe && has_resources && !is_temporal_rift && !night_time
print_to_cora("Ideal conditions for base camp: " + is_ideal_conditions)  // true

// Comparison operators also produce boolean results
temperature = 22
radiation_level = 3.2
oxygen_level = 19.5
water_supply = 85

// Greater than (>)
is_warm = temperature > 20
print_to_cora("Is warm: " + is_warm)  // true

// Less than (<)
is_radiation_safe = radiation_level < 5
print_to_cora("Radiation safe: " + is_radiation_safe)  // true

// Greater than or equal to (>=)
is_oxygen_sufficient = oxygen_level >= 19
print_to_cora("Sufficient oxygen: " + is_oxygen_sufficient)  // true

// Less than or equal to (<=)
is_water_low = water_supply <= 50
print_to_cora("Water supply low: " + is_water_low)  // false

// Equality (==) and Inequality (!=)
is_optimal_temp = temperature == 22
is_water_full = water_supply != 100
print_to_cora("Optimal temperature: " + is_optimal_temp)  // true
print_to_cora("Water supply not full: " + is_water_full)  // true

// Combining comparison and logical operators
is_habitable = temperature >= 15 && temperature <= 30 && 
               radiation_level < 10 && oxygen_level >= 18 &&
               water_supply > 50
               
print_to_cora("Area is habitable: " + is_habitable)  // true

// Expected Output:
// Area safety: true
// Resources present: true
// Temporal rift: false
// Night time: false
// Can collect resources: true
// Should leave area: false
// Should stay in area: true
// Ideal conditions for base camp: true
// Is warm: true
// Radiation safe: true
// Sufficient oxygen: true
// Water supply low: false
// Optimal temperature: true
// Water supply not full: true
// Area is habitable: true 