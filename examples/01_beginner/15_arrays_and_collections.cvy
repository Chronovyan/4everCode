// Chronovyan Learning Example: Arrays and Collections
// Difficulty: Beginner
// Concepts: Arrays, collections, iteration, basic array operations
//
// This example demonstrates how to work with ordered collections (arrays)
// in Chronovyan, a fundamental concept for managing groups of related data.

// Creating an empty array
empty_array = []
print_to_cora("Empty array: " + empty_array)

// Creating an array with initial values
numbers = [42, 37, 61, 28]
print_to_cora("Number array: " + numbers)

// Arrays can store different types of values
mixed_values = [42, "hello", true, 3.14]
print_to_cora("Mixed values array: " + mixed_values)

// Adding elements to an array using push()
resources = ["crystal", "mineral"]
print_to_cora("Initial resources: " + resources)

resources.push("water")
print_to_cora("After adding water: " + resources)

resources.push("biomatter")
print_to_cora("After adding biomatter: " + resources)

// Accessing array elements by index (zero-based)
first_resource = resources[0]
print_to_cora("First resource: " + first_resource)  // crystal

third_resource = resources[2]
print_to_cora("Third resource: " + third_resource)  // water

// Array length property
resource_count = resources.length
print_to_cora("Number of resources: " + resource_count)  // 4

// Iterating through array elements with a loop
print_to_cora("All resources:")
for (i = 0; i < resources.length; i++) {
    print_to_cora((i + 1) + ". " + resources[i])
}

// Modifying array elements
resources[1] = "refined mineral"
print_to_cora("After modifying second element: " + resources)

// Basic array operations - Finding maximum value
readings = [42, 78, 29, 61, 35]
print_to_cora("Sensor readings: " + readings)

max_reading = readings[0]
for (i = 1; i < readings.length; i++) {
    if (readings[i] > max_reading) {
        max_reading = readings[i]
    }
}
print_to_cora("Maximum reading: " + max_reading)  // 78

// Basic array operations - Finding minimum value
min_reading = readings[0]
for (i = 1; i < readings.length; i++) {
    if (readings[i] < min_reading) {
        min_reading = readings[i]
    }
}
print_to_cora("Minimum reading: " + min_reading)  // 29

// Basic array operations - Calculating sum and average
sum = 0
for (i = 0; i < readings.length; i++) {
    sum += readings[i]
}
average = sum / readings.length
print_to_cora("Sum of readings: " + sum)
print_to_cora("Average reading: " + average)

// Filtering array elements
high_readings = []
threshold = 50

for (i = 0; i < readings.length; i++) {
    if (readings[i] > threshold) {
        high_readings.push(readings[i])
    }
}
print_to_cora("Readings above " + threshold + ": " + high_readings)  // [78, 61]

// Using arrays with functions
function process_readings(data_array, min_threshold, max_threshold) {
    valid_readings = []
    
    for (i = 0; i < data_array.length; i++) {
        if (data_array[i] >= min_threshold && data_array[i] <= max_threshold) {
            valid_readings.push(data_array[i])
        }
    }
    
    return valid_readings
}

valid_data = process_readings(readings, 30, 70)
print_to_cora("Valid readings (30-70): " + valid_data)  // [42, 61, 35]

// Multi-dimensional arrays (arrays of arrays)
// Useful for representing grids or tables
grid = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print_to_cora("Grid second row: " + grid[1])  // [4, 5, 6]
print_to_cora("Grid element at row 2, column 3: " + grid[1][2])  // 6

// Expected Output:
// Empty array: 
// Number array: 42,37,61,28
// Mixed values array: 42,hello,true,3.14
// Initial resources: crystal,mineral
// After adding water: crystal,mineral,water
// After adding biomatter: crystal,mineral,water,biomatter
// First resource: crystal
// Third resource: water
// Number of resources: 4
// All resources:
// 1. crystal
// 2. mineral
// 3. water
// 4. biomatter
// After modifying second element: crystal,refined mineral,water,biomatter
// Sensor readings: 42,78,29,61,35
// Maximum reading: 78
// Minimum reading: 29
// Sum of readings: 245
// Average reading: 49
// Readings above 50: 78,61
// Valid readings (30-70): 42,61,35
// Grid second row: 4,5,6
// Grid element at row 2, column 3: 6 