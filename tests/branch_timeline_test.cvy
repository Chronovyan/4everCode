// BRANCH_TIMELINE Test Cases
// This file tests the BRANCH_TIMELINE construct functionality

// Global variables for testing
var global_result = 0;
var results = [];
var merged_values = {};

// Utility function to display results
function displayResults() {
    printLine("Results array: " + results);
    printLine("Global result: " + global_result);
    
    // Display merged values if any
    if (merged_values.size() > 0) {
        printLine("Merged values:");
        for (var key in merged_values) {
            printLine("  " + key + ": " + merged_values[key]);
        }
    }
}

printLine("======= BRANCH_TIMELINE Tests =======");

// ===== Test 1: Basic branching with default parameters =====
printLine("\n===== Test 1: Basic Branching (Default Parameters) =====");
printLine("Expected: Two branches with separate calculations");

BRANCH_TIMELINE {
    // Each branch gets its own copy of the environment
    var branch_value = 100;
    
    // We can access branch-specific variables
    printLine("Running in branch: " + BRANCH_NAME + 
              " (ID: " + BRANCH_ID + " of " + TOTAL_BRANCHES + ")");
    
    // Perform branch-specific calculations
    if (BRANCH_ID == 0) {
        branch_value += 50;
    } else {
        branch_value *= 2;
    }
    
    printLine("Branch " + BRANCH_ID + " calculated value: " + branch_value);
    
    // Update global state (will be merged based on strategy)
    global_result += branch_value;
    results.push(branch_value);
}

printLine("After branching:");
displayResults();
results = []; // Reset for next test

// ===== Test 2: Multiple branches with specified count =====
printLine("\n===== Test 2: Multiple Branches (Specified Count) =====");
printLine("Expected: Five branches with count-based calculations");

global_result = 0;
BRANCH_TIMELINE(5) {
    // Each branch calculates a different value based on its ID
    var calculation = (BRANCH_ID + 1) * 10;
    printLine("Branch " + BRANCH_ID + " calculating: " + calculation);
    
    // Only add to global result for odd-numbered branches
    if (BRANCH_ID % 2 == 1) {
        global_result += calculation;
        printLine("Branch " + BRANCH_ID + " contributing to global result");
    }
    
    results.push(calculation);
}

printLine("After multi-branch execution:");
displayResults();
results = []; // Reset for next test

// ===== Test 3: Named branches with custom identifier =====
printLine("\n===== Test 3: Named Branches (Custom Identifier) =====");
printLine("Expected: Three branches with custom names");

global_result = 0;
BRANCH_TIMELINE(3, "scenario") {
    printLine("Running in branch: " + BRANCH_NAME);
    
    // Simulate different scenarios based on branch ID
    var scenario_result = 0;
    
    if (BRANCH_ID == 0) {
        scenario_result = 100; // Best case scenario
        printLine("Best case scenario: " + scenario_result);
    } else if (BRANCH_ID == 1) {
        scenario_result = 50;  // Average case scenario
        printLine("Average case scenario: " + scenario_result);
    } else {
        scenario_result = 10;  // Worst case scenario
        printLine("Worst case scenario: " + scenario_result);
    }
    
    // Store result from this scenario
    results.push(scenario_result);
    merged_values["scenario_" + BRANCH_ID] = scenario_result;
}

printLine("After scenario branching:");
displayResults();
merged_values = {}; // Reset for next test
results = []; // Reset for next test

// ===== Test 4: Resource consumption tracking =====
printLine("\n===== Test 4: Resource Consumption Tracking =====");

// Get current resources
var initial_chronons = getChronons();
var initial_aethel = getAethel();

printLine("Initial resources - Chronons: " + initial_chronons + ", Aethel: " + initial_aethel);

// Execute a complex branch operation with many branches
BRANCH_TIMELINE(8) {
    // Perform some calculation in each branch
    var calculation = BRANCH_ID * BRANCH_ID * 10;
    results.push(calculation);
}

// Check resources after branching
var final_chronons = getChronons();
var final_aethel = getAethel();

printLine("Final resources - Chronons: " + final_chronons + ", Aethel: " + final_aethel);
printLine("Resources consumed - Chronons: " + (initial_chronons - final_chronons) + 
          ", Aethel: " + (initial_aethel - final_aethel));

displayResults();

printLine("\n======= All BRANCH_TIMELINE Tests Completed ======="); 