// Tome of Solutions: Answers to the Weaver's Exercises
// Keep this tome safe, for its knowledge is powerful

// === Exercise 1: The Greeting Ritual ===
// A simple function to greet a fellow Weaver
fn greet(weaverName) {
    // The most basic of incantations
    return `Hail, ${weaverName}! May your threads never tangle.`;
}

// Example usage:
let greeting = greet("Apprentice");
speak_to_timeline(greeting);  // Outputs: Hail, Apprentice! May your threads never tangle.

// === Exercise 2: The Inventory Conundrum ===
// Create an inventory system
let inventory = [
    { name: "Aethel_Shard", type: "resource", quantity: 3 },
    { name: "Temporal_Compass", type: "tool", durability: 100 },
    { name: "Threadbare_Cloak", type: "armor", defense: 5 }
];

// Function to find an item by name
fn findItem(inventory, itemName) {
    // The Keeper's Search - returns the item or nil if not found
    for (let i = 0; i < inventory.length; i++) {
        if (inventory[i].name == itemName) {
            return inventory[i];
        }
    }
    return nil;  // Return to the Void
}

// Example usage:
let item = findItem(inventory, "Aethel_Shard");
if (item != nil) {
    speak_to_timeline(`Found: ${item.name} x${item.quantity || 1}`);
} else {
    speak_to_timeline("Item lost to the Void");
}

// === Exercise 3: The Timekeeper's Challenge ===
// Function to tell how many minutes until the next hour
fn minutesUntilNextHour() {
    let timekeeper = Clock();
    let now = timekeeper.now();
    
    // The Timekeeper reveals all moments
    let currentMinute = now.getMinutes();
    let minutesLeft = 60 - currentMinute;
    
    // Handle the edge case where we're exactly on the hour
    if (minutesLeft == 60) {
        return 0;
    }
    
    return minutesLeft;
}

// Example usage:
let minutes = minutesUntilNextHour();
speak_to_timeline(`The next hour comes in ${minutes} minutes.`);

// === Bonus: The Weaver's Riddle ===
// A function that demonstrates different return types
fn weaversRiddle(answer) {
    if (answer == 42) {
        return "Ah, a student of the ancient texts!";
    } else if (answer < 42) {
        return 42 - answer;  // How far off you are
    } else {
        return ["Wrong", "Try", "Again"];  // An array of suggestions
    }
}

// The RUNTIME reminds us: With great power comes great responsibility.
// Use these solutions to learn, but always seek to understand the underlying patterns.
